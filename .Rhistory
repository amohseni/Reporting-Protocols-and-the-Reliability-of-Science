data = data.frame(x = stableFixedPoint / Z, y = rep(0, times = length(stableFixedPoint))),
aes(x, y),
shape = 21,
colour = "#3576BD",
fill = "#3576BD",
size = 5,
stroke = 2
) +
geom_segment(
# Plot flow lines
data = lineSegmentMatrix / Z,
aes(
x = start,
xend = end,
y = 0,
yend = 0
),
size = 2,
color = "black",
arrow = arrow(length = unit(.4, "cm")),
linejoin = "mitre",
lineend = "butt"
) +
geom_point(
# Plot unstable fixed points
data = data.frame(x = unstableFixedPoint / Z, y = rep(0, times = length(unstableFixedPoint))),
aes(x, y),
shape = 21,
colour = "#3576BD",
fill = "white",
size = 5,
stroke = 2
)
print(plot_GradientDF)
shiny::runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
seq(from = 1, to = R, by = 1)
R
R <- 10
seq(from = 1, to = R, by = 1)
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
runApp('GitHub/Bounded-Confidence-Model')
shiny::runApp('GitHub/Bounded-Confidence-Model')
shiny::runApp('GitHub/Tragedies-of-the-Commons')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
x <- seq(from = -0.2, to = 0.6, by = 0.02)
dnorm(x, mean = .22, sd = 0.07)
dnorm(x, mean = .22, sd = 0.07)
likelihood <- function(mu) { dnrom(.22, mean = mu, sd = 0,07) }
dnorm(x, mean = .22, sd = 0.07)
likelihood <- function(mu) { dnrom(.22, mean = mu, sd = 0,07) }
likelihood <- lapply(x, likelihoodFunction)
likelihoodFunction <- function(mu) { dnrom(.22, mean = mu, sd = 0.07) }
likelihood <- lapply(x, likelihoodFunction)
likelihoodFunction <- function(mu) { dnorm(.22, mean = mu, sd = 0.07) }
likelihood <- lapply(x, likelihoodFunction)
dataMean <- .22
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <- function(mu) { dnorm(.22, mean = mu, sd = 0.07) }
likelihood <- lapply(x, likelihoodFunction)
plot(likelihoodFunction)
plot(x = x, y = likelihood)
plot(x = x, y = likelihood, type="o", col="blue")
dataMean <- .22
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(xdata, likelihoodOfData, col = "dark red", pch = "+")
lines(xdata, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .22
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .52
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .62
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .8
rangeMin <- -0.2
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .22
rangeMin <- -0.4
rangeMax <- 0.6
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
dataMean <- .22
rangeMin <- -1
rangeMax <- 1
rangeStep <- 0.02
x <- seq(from = rangeMin, to = rangeMax, by = rangeStep)
normaldistribution <- dnorm(x, mean = .22, sd = 0.07)
likelihoodFunction <-
function(mu) {
dnorm(.22, mean = mu, sd = 0.07)
}
likelihoodOfData <- lapply(x, likelihoodFunction)
plot(x = x,
y = normaldistribution,
type = "o",
col = "blue")
points(x = x, likelihoodOfData, col = "dark red", pch = "+")
lines(x = x, likelihoodOfData, col = "dark red", lty = 3)
sum(likelihoodOfData)
likelihoodOfData
sum(likelihoodOfData)
sum(as.vector(likelihoodOfData))
as.vector(likelihoodOfData)
c(likelihoodOfData)
as.vector(likelihoodOfData)
c(likelihoodOfData)
unlist(likelihoodOfData)
sum(unlist(likelihoodOfData))
sum(normaldistribution)
sum(unlist(likelihoodOfData))
sum(normaldistribution)
sum(unlist(likelihoodOfData)) = sum(normaldistribution)
sum(unlist(likelihoodOfData)) == sum(normaldistribution)
shiny::runApp('GitHub/EM-Algorithm-for-Gaussian-Mixtures')
1.3^3
1.3^3 - 1
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfWins, numberOfTrades) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
numberOfWins ^ averageWin * (numberOfTrades - numberOfWins) ^ averageLoss - 1
}
ProbabilityOfAllOutcomes <- lapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- lapply(possibleOutcomes, Profit)
ExpectedProfit <- ProbabilityOfAllOutcomes * ProfitOfAllOutcomes
ProbabilityOfAllOutcomes
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfWins, numberOfTrades) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
numberOfWins ^ averageWin * (numberOfTrades - numberOfWins) ^ averageLoss - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- ProbabilityOfAllOutcomes * ProfitOfAllOutcomes
print(ExpectedProfit)
print(ExpectedProfit)
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfWins, numberOfTrades) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
numberOfWins ^ averageWin * (numberOfTrades - numberOfWins) ^ averageLoss - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(ExpectedProfit)
choose(numberOfWins, numberOfTrades)
numberOfWins <- 0
choose(numberOfWins, numberOfTrades)
choose(4, 0)
choose(4, 2)
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
numberOfWins ^ averageWin * (numberOfTrades - numberOfWins) ^ averageLoss - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(ExpectedProfit)
choose(4, 1)
choose(4, 2)
choose(3, 2)
choose(3, 1)
choose(3, 0)
choose(3, 3)
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
numberOfWins ^ averageWin * (numberOfTrades - numberOfWins) ^ averageLoss - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(ExpectedProfit)
ProbabilityOfAllOutcomes
sum(ProbabilityOfAllOutcomes)
sum(ProfitOfAllOutcomes)
ProfitOfAllOutcomes
ProfitOfAllOutcomes
numberOfWins ^ averageWin
Profit(3)
Profit(0)
Profit(1)
Profit(2)
Profit(3)
Profit()
Profit(4)
numberOfWins ^ averageWin
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(ExpectedProfit)
1 + ExpectedProfit
ProbabilityOfAllOutcomes
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) & numberOfTrades)
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(ExpectedProfit)
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) & numberOfTrades)
winPercent
numberOfTrades
winPercent * numberOfTrades
averageWin ^ (winPercent * numberOfTrades)
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) & numberOfTrades)
numberOfTrades
winPercent
averageLoss
averageWin
averageLoss
winPercent
numberOfTrades
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) & numberOfTrades)
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades)
averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("Expected value = ", ExpectedProfit))
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", ExpectedProfit))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", ExpectedProfit))
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", ExpectedProfit))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", AliceInnovation))
1.3^4
.9^4
1.3^2*.9^2
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.1
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", ExpectedProfit))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", AliceInnovation))
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.1
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", round(ExpectedProfit, digits = 3)))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", round(AliceInnovation, digits = 3)))
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.1
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", round(ExpectedProfit, digits = 4)))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", round(AliceInnovation, digits = 4)))
.9^4
.9^4 - 1
1.3^4 - 1
.9^2*1.3^2
1.3689 - 0.6561
1.3689 - -0.3439
(.9^2*1.3^2 - 1) - (.9^4 - 1)
(.9^2*1.3^2 - 1) - (1.3^4 - 1)
numberOfTrades <- 4
possibleOutcomes <- seq(from = 0, to = numberOfTrades)
winPercent <- .5
averageWin <- 1.3
averageLoss <- .9
Probability <- function(numberOfWins) {
choose(numberOfTrades, numberOfWins) * winPercent ^ numberOfWins * (1 - winPercent) ^ (numberOfTrades - numberOfWins)
}
Profit <- function(numberOfWins) {
averageWin ^ numberOfWins * averageLoss ^ (numberOfTrades - numberOfWins) - 1
}
ProbabilityOfAllOutcomes <- sapply(possibleOutcomes, Probability)
ProfitOfAllOutcomes <- sapply(possibleOutcomes, Profit)
ExpectedProfit <- sum(ProbabilityOfAllOutcomes * ProfitOfAllOutcomes)
print(paste("Expected value = ", round(ExpectedProfit, digits = 4)))
AliceInnovation <- averageWin ^ (winPercent * numberOfTrades) * averageLoss ^ ((1 - winPercent) * numberOfTrades) - 1
print(paste("AliceInnovation = ", round(AliceInnovation, digits = 4)))
rnorm(1, mean = priorMean, BiasStrength ^ -1)
rnorm(1, 1, 1)
?rnorm
shiny::runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
runApp('GitHub/Reporting-Protocols-and-the-Reliability-of-Science')
